import type { ThreadCreateParams } from 'openai/resources/beta/threads/threads';
import type { Content } from '../content';
import type { PRDetails } from '../github';
import type { AiComment } from './interfaces';

export function createFirstThreadMessage({ pullNumber, action, description, title, repo }: PRDetails): ThreadCreateParams.Message {
  return {
    role: 'user',
    content: `
Revise a pull request e forne√ßa feedback sobre as altera√ß√µes propostas. Considere o seguinte contexto:
Reposit√≥rio: '${repo}'
N√∫mero da PR: ${pullNumber}
Evento da PR: ${action}

T√≠tulo da PR: '${title}'

Descri√ß√£o da PR:

${description}

`
  };
}

export function createPrompt(content: Content): string {
  return `
**Git diff para revis√£o:**
**filename:** \`${content.filename}\`

\`\`\`diff
${content.content}
\`\`\`
`;
}

export function getAdditionalInstructions(language: string = 'pt-br'): string {
  return `IMPORTANTE:
- N√£o fa√ßa coment√°rios positivos ou elogios;
- Se n√£o houver problemas relevantes, n√£o fa√ßa coment√°rios, retorne 'reviews' um array vazio;
- Responda no idi√¥ma '${language}'.`;
}

const severityMap = { error: 'üö®', warning: '‚ö†Ô∏è', info: 'üìå' };

export function bodyComment({ reviewComment, reason, severity }: AiComment): string {
  if (!reviewComment || !reason) return '';

  const emoji = severityMap?.[severity] || `[${severity}] `;
  return `${emoji}
${reviewComment || ''}
${reason || ''}
`;
}
